saveRDS(DEGs_dataset,file.path(results_folder,"Zeisel/DEgenes.rds"))
dataset <- readRDS(file.path(results_folder,"Yao/Seurat_QCd.rds"))
dataset <- NormalizeData(dataset)
dataset <- ScaleData(dataset)
DefaultAssay(dataset) <- "RNA"
Idents(dataset) <- "final_label"
DEGs_dataset <- FindAllMarkers(dataset,only.pos = T)
saveRDS(DEGs_dataset,file.path(results_folder,"Yao/DEgenes.rds"))
dataset <- readRDS(file.path(results_folder,"Langlieb/Seurat_QCd.rds"))
dataset <- NormalizeData(dataset)
dataset <- ScaleData(dataset)
DefaultAssay(dataset) <- "RNA"
Idents(dataset) <- "final_label"
DEGs_dataset <- FindAllMarkers(dataset,only.pos = T)
saveRDS(DEGs_dataset,file.path(results_folder,"Langlieb/DEgenes.rds"))
dataset <- readRDS(file.path(results_folder,"Batiuk/Seurat_QCd.rds"))
dataset <- NormalizeData(dataset)
dataset <- ScaleData(dataset)
DefaultAssay(dataset) <- "RNA"
Idents(dataset) <- "final_label"
DEGs_dataset <- FindAllMarkers(dataset,only.pos = T)
saveRDS(DEGs_dataset,file.path(results_folder,"Batiuk/DEgenes.rds"))
# Load data
markers1 <- readRDS(file.path(results_folder,"Saunders/DEgenes.rds"))
markers2 <- readRDS(file.path(results_folder,"Zeisel/DEgenes.rds"))
markers3 <- readRDS(file.path(results_folder,"Yao/DEgenes.rds"))
markers4 <- readRDS(file.path(results_folder,"Langlieb/DEgenes.rds"))
markers5 <- readRDS(file.path(results_folder,"Batiuk/DEgenes.rds"))
# Merge all DEG lists
markers <- rbind(markers1,markers2,markers3,markers4,markers5)
table(markers$cluster)
# Order by avg_log2FC
markers <- markers[order(markers$avg_log2FC,decreasing = T),]
markers <- markers[markers$gene %in% rownames(mergedObjects),]
# Save results
saveRDS(object = markers,file = file.path(results_folder,"DEgenes_combined.rds"))
# Load saved DEGs
markers <- readRDS(file = file.path(results_folder,"DEgenes_combined.rds"))
# Extract gene list
gene_names <- unique(markers$gene)
# Run wilcox
wilcox_data <- generateWilcoxValues(subregionNames = subregionNames,pval_threshold = 0.05,gene_names = gene_names)
# Add average expression
wilcox_data <- addAvgExp(wilcoxFile = wilcox_data, subregionNames = subregionNames,normalizationMethod = "softmax")
View(wilcox_data)
# Add average expression
wilcox_data <- addAvgExp(wilcoxFile = wilcox_data, subregionNames = subregionNames,normalizationMethod = "softmax")
tmp <- wilcox_data
source("~/Library/CloudStorage/OneDrive-KULeuven/LabFiles/Projects/0002_AstroMAP/AstroMAP/02_Scripts/Functions/addAvgExp_v2.R")
# Add average expression
wilcox_data <- addAvgExp2(wilcoxFile = wilcox_data, subregionNames = subregionNames,normalizationMethod = "softmax")
# Add average expression
wilcox_data <- addAvgExp_v2(wilcoxFile = wilcox_data, subregionNames = subregionNames,normalizationMethod = "softmax")
# Add average expression
wilcox_data <- addAvgExp_v2(wilcoxFile = wilcox_data, subregionNames = subregionNames)
View(wilcox_data)
# Save
saveRDS(object = wilcox_data,file = file.path(results_folder,"Wilcox.rds"))
dataset1 <- readRDS(file.path(results_folder,"Saunders/Seurat_QCd.rds"))
dataset2 <- readRDS(file.path(results_folder,"Zeisel/Seurat_QCd.rds"))
dataset3 <- readRDS(file.path(results_folder,"Yao/Seurat_QCd.rds"))
dataset4 <- readRDS(file.path(results_folder,"Langlieb/Seurat_QCd.rds"))
dataset5 <- readRDS(file.path(results_folder,"Batiuk/Seurat_QCd.rds"))
# Merge samples
integrated <- merge(dataset1, c(dataset2,dataset3,dataset4,dataset5))
all_metadata <- integrated@meta.data
# Confirm that object layers are split by section
integrated[["RNA"]] <- JoinLayers(integrated[["RNA"]])
integrated[["RNA"]] <- split(integrated[["RNA"]], f = integrated$study)
# Normalize, find variable features and scale data
integrated <- NormalizeData(integrated)
integrated <- FindVariableFeatures(integrated,nfeatures = 3000)
integrated <- ScaleData(integrated)
# Run PCA
integrated <- RunPCA(integrated,npcs = 75)
# Run RPCA integration
integrated <- IntegrateLayers(integrated, orig.reduction = "pca",method =  RPCAIntegration,new.reduction = "integrated.rpca", normalization.method = "LogNormalize") # Try with a reference (maybe Langlieb)
# Check elbow plot
ElbowPlot(integrated,ndims = 75)
# Run UMAP, find neighbors and find clusters
integrated <- RunUMAP(integrated, reduction = "integrated.rpca", dims = 1:20,n.neighbors = 20,min.dist = 0.15)
integrated <- FindNeighbors(integrated, dims = 1:20, reduction = "integrated.rpca",k.param = 20)
integrated <- FindClusters(integrated, resolution = 0.25)
# Visualize clustering
DimPlot(integrated,label = T,label.size = 3,group.by = "seurat_clusters") + NoLegend()+ force_panelsizes(rows = unit(5,"cm"),cols = unit(5,"cm")) + theme_void() + NoLegend() + labs(title = "")
DimPlot(integrated,label = F,label.size = 6,group.by = "study")+ force_panelsizes(rows = unit(5,"cm"),cols = unit(5,"cm")) + theme_void() + labs(title = "")
DimPlot(integrated,label = F,label.size = 6,group.by = "final_label",split.by = "study")+ force_panelsizes(rows = unit(5,"cm"),cols = unit(5,"cm")) + theme_void() + labs(title = "")
table(integrated@meta.data$final_label,integrated@meta.data$seurat_clusters)
# Save integration cluster
saveRDS(object = integrated,file = file.path(results_folder,"sc_integration.rds"))
table(integrated@meta.data$study)
# Save umap plot data
integrated_metadata <- cbind(integrated@meta.data,integrated@reductions[["umap"]]@cell.embeddings)
# Check distribution of cells per final label and seurat clusters
table(integrated_metadata$final_label,integrated_metadata$seurat_clusters)
# Add new column with consensus_label
integrated_metadata$consensus_label <- integrated_metadata$seurat_clusters
integrated_metadata$consensus_label <- as.character(integrated_metadata$consensus_label)
# Add consensus labels
integrated_metadata$consensus_label[integrated_metadata$consensus_label %in% c("0","1","2","3","7","8","9","10","11")] <- "alpha"
integrated_metadata$consensus_label[integrated_metadata$consensus_label %in% c("4")] <- "beta"# Agt+
integrated_metadata$consensus_label[integrated_metadata$consensus_label %in% c("5")] <- "gamma"# Gfap+
integrated_metadata$consensus_label[integrated_metadata$consensus_label %in% c("6")] <- "delta"# AST4-like
integrated_metadata$consensus_label[integrated_metadata$consensus_label %in% c("8")] <- "epsilon"# ??+
# Add new column with consensus_label
integrated_metadata$consensus_label <- integrated_metadata$seurat_clusters
integrated_metadata$consensus_label <- as.character(integrated_metadata$consensus_label)
# Add consensus labels
integrated_metadata$consensus_label[integrated_metadata$consensus_label %in% c("0","1","2","3","7","8","9","11")] <- "alpha"
integrated_metadata$consensus_label[integrated_metadata$consensus_label %in% c("4")] <- "beta"# Agt+
integrated_metadata$consensus_label[integrated_metadata$consensus_label %in% c("5")] <- "gamma"# Gfap+
integrated_metadata$consensus_label[integrated_metadata$consensus_label %in% c("6")] <- "delta"# AST4-like
integrated_metadata$consensus_label[integrated_metadata$consensus_label %in% c("8")] <- "epsilon"# ??+
integrated_metadata$consensus_label[integrated_metadata$consensus_label %in% c("10")] <- "zeta"# ??+
table(integrated_metadata$consensus_label)
table(integrated_metadata$seurat_clusters,integrated_metadata$consensus_label)
table(integrated_metadata$final_label,integrated_metadata$consensus_label)
# Keep only columns of interest
integrated_metadata <- integrated_metadata[,c("study","seurat_clusters","final_label","consensus_label","umap_1","umap_2")]
integrated_metadata$sampleID <- rownames(integrated_metadata)
# Save umap plot data
saveRDS(object = integrated_metadata,file.path(results_folder,"Integration_metadata.rds"))
# Save table
fwrite(x = integrated_metadata,file.path(results_folder,"Integration_metadata.tsv"),row.names = F)
# Load plot data
integrated_umap_plot_data <- readRDS(file.path(results_folder,"Integration_metadata.rds"))
table(integrated_umap_plot_data$study)
# Make plots
p0 <- make_main_umap_plot(data = integrated_umap_plot_data,variable = "seurat_clusters")
p1 <- make_umap_plot(data = integrated_umap_plot_data,study_name = "Batiuk",variable = "final_label")
p2 <- make_umap_plot(data = integrated_umap_plot_data,study_name = "Zeisel",variable = "final_label")
p3 <- make_umap_plot(data = integrated_umap_plot_data,study_name = "Saunders",variable = "final_label")
p4 <- make_umap_plot(data = integrated_umap_plot_data,study_name = "Yao",variable = "final_label")
p5 <- make_umap_plot(data = integrated_umap_plot_data,study_name = "Langlieb",variable = "final_label")
p6 <- make_main_umap_plot(data = integrated_umap_plot_data,variable = "study")
p7 <- make_main_umap_plot(data = integrated_umap_plot_data,variable = "consensus_label")
# Save plots
ggsave(filename =  paste0(results_folder,"/UMAP_integration_seurat_clusters.pdf"),plot = p0,device = "pdf",height = 5,width = 5,units = "cm")
ggsave(filename = file.path(results_folder,"/UMAP_integration_Batiuk.pdf"),plot = p1,device = "pdf",height = 5,width = 5,units = "cm",limitsize = FALSE)
ggsave(filename = file.path(results_folder,"/UMAP_integration_Zeisel.pdf"),plot = p2,device = "pdf",height = 5,width = 5,units = "cm",limitsize = FALSE)
ggsave(filename = file.path(results_folder,"/UMAP_integration_Saunders.pdf"),plot = p3,device = "pdf",height = 5,width = 5,units = "cm",limitsize = FALSE)
ggsave(filename = file.path(results_folder,"/UMAP_integration_Yao.pdf"),plot = p4,device = "pdf",height = 5,width = 5,units = "cm",limitsize = FALSE)
ggsave(filename = file.path(results_folder,"/UMAP_integration_Langlieb.pdf"),plot = p5,device = "pdf",height = 5,width = 5,units = "cm",limitsize = FALSE)
ggsave(filename = file.path(results_folder,"/UMAP_integration_study.pdf"),plot = p6,device = "pdf",height = 5,width = 5,units = "cm",limitsize = FALSE)
ggsave(filename = file.path(results_folder,"/UMAP_integration_consensus_label.pdf"),plot = p7,device = "pdf",height = 5,width = 5,units = "cm",limitsize = FALSE)
# Load QCd datasets
dataset1 <- readRDS(file.path(results_folder,"Saunders/Seurat_QCd.rds"))
dataset2 <- readRDS(file.path(results_folder,"Zeisel/Seurat_QCd.rds"))
dataset3 <- readRDS(file.path(results_folder,"Yao/Seurat_QCd.rds"))
dataset4 <- readRDS(file.path(results_folder,"Langlieb/Seurat_QCd.rds"))
dataset5 <- readRDS(file.path(results_folder,"Batiuk/Seurat_QCd.rds"))
# Determine the top 1000 highly variable genes
hvg1 <- FindVariableFeatures(object = dataset1,nfeatures = 1000,assay = "RNA")
hvg1 <- hvg1@assays[["RNA"]]@meta.data$var.features[!is.na(hvg1@assays[["RNA"]]@meta.data$var.features)]
hvg2 <- FindVariableFeatures(object = dataset2,nfeatures = 1000,assay = "RNA")
hvg2 <- hvg2@assays[["RNA"]]@meta.data$var.features[!is.na(hvg2@assays[["RNA"]]@meta.data$var.features)]
hvg3 <- FindVariableFeatures(object = dataset3,nfeatures = 1000,assay = "RNA")
hvg3 <- hvg3@assays[["RNA"]]@meta.data$var.features[!is.na(hvg3@assays[["RNA"]]@meta.data$var.features)]
hvg4 <- FindVariableFeatures(object = dataset4,nfeatures = 1000,assay = "RNA")
hvg4 <- hvg4@assays[["RNA"]]@meta.data$var.features[!is.na(hvg4@assays[["RNA"]]@meta.data$var.features)]
hvg5 <- FindVariableFeatures(object = dataset5,nfeatures = 1000,assay = "RNA")
hvg5 <- hvg5@assays[["RNA"]]@meta.data$var.features[!is.na(hvg5@assays[["RNA"]]@meta.data$var.features)]
# Combine high variable genes
unique_genes <- unique(c(hvg1,hvg2,hvg3,hvg4,hvg5))
# Compute pseudo bulk average expression on z-score scaled data
DefaultAssay(dataset1) <- "RNA"
Idents(dataset1) <- "cellType_L3"
dataset1 <- ScaleData(object = dataset1, features = unique_genes )
pseudo_bulk1 <- AverageExpression(object = dataset1,assays = "RNA",features = unique_genes,layer = "scale.data")
pseudo_bulk1 <- as.data.frame(pseudo_bulk1[["RNA"]])
colnames(pseudo_bulk1) <- unique(dataset1@meta.data$final_label)
# Compute pseudo bulk average expression on z-score scaled data
DefaultAssay(dataset2) <- "RNA"
Idents(dataset2) <- "cellType_L3"
dataset2 <- ScaleData(object = dataset2, features = unique_genes)
pseudo_bulk2 <- AverageExpression(object = dataset2,assays = "RNA",features = unique_genes,layer = "scale.data")
pseudo_bulk2 <- as.data.frame(pseudo_bulk2[["RNA"]])
colnames(pseudo_bulk2) <- unique(dataset2@meta.data$final_label)
# Compute pseudo bulk average expression on z-score scaled data
DefaultAssay(dataset3) <- "RNA"
Idents(dataset3) <- "cellType_L3"
dataset3 <- ScaleData(object = dataset3, features = unique_genes )
pseudo_bulk3 <- AverageExpression(object = dataset3,assays = "RNA",features = unique_genes,layer = "scale.data")
pseudo_bulk3 <- as.data.frame(pseudo_bulk3[["RNA"]])
colnames(pseudo_bulk3) <- unique(dataset3@meta.data$final_label)
# Compute pseudo bulk average expression on z-score scaled data
DefaultAssay(dataset4) <- "RNA"
Idents(dataset4) <- "cellType_L3"
dataset4 <- ScaleData(object = dataset4, features = unique_genes )
pseudo_bulk4 <- AverageExpression(object = dataset4,assays = "RNA",features = unique_genes,layer = "scale.data")
pseudo_bulk4 <- as.data.frame(pseudo_bulk4[["RNA"]])
colnames(pseudo_bulk4) <- unique(dataset4@meta.data$final_label)
# Compute pseudo bulk average expression on z-score scaled data
DefaultAssay(dataset5) <- "RNA"
Idents(dataset5) <- "cellType_L2"
dataset5 <- ScaleData(object = dataset5, features = unique_genes)
pseudo_bulk5 <- AverageExpression(object = dataset5,assays = "RNA",features = unique_genes,layer = "scale.data")
pseudo_bulk5 <- as.data.frame(pseudo_bulk5[["RNA"]])
colnames(pseudo_bulk5) <- unique(dataset5@meta.data$final_label)
pseudo_bulk1 <- pseudo_bulk1[unique_genes,]
pseudo_bulk2 <- pseudo_bulk2[unique_genes,]
pseudo_bulk3 <- pseudo_bulk3[unique_genes,]
pseudo_bulk4 <- pseudo_bulk4[unique_genes,]
pseudo_bulk5 <- pseudo_bulk5[unique_genes,]
# Combine all pseudo-bulk expression
mtx <- cbind(pseudo_bulk1,pseudo_bulk2,pseudo_bulk3,pseudo_bulk4,pseudo_bulk5)
# Calculate the correlation matrix
correlation_matrix <- cor(mtx, method = "pearson")
# Save correlation matrix
saveRDS(object = correlation_matrix,file.path(results_folder,"Heatmap_correlation.rds"))
fwrite(x = correlation_matrix,file.path(results_folder,"Heatmap_correlation.tsv"),row.names = T)
# Load plot data
correlation_matrix <- readRDS(file = file.path(results_folder,"Heatmap_correlation.rds"))
# Create the heatmap using pheatmap with viridis color palette, without numbers, and with dendrograms
pheatmap_result <- pheatmap(correlation_matrix,
color = viridis(50),
clustering_method = "complete",
display_numbers = FALSE,
fontsize = 6,
angle_col = 45,cellheight = unit(0.25,"cm"),cellwidth= unit(0.25,"cm"))
# # Extract the order of rows and columns from the pheatmap result
row_order <- pheatmap_result$tree_row$order
# Extract the names of rows and columns in the order they are displayed
clusterOrder <- rownames(correlation_matrix)[row_order]
# Save results
saveRDS(object = clusterOrder,file = file.path(results_folder,"clusterOrder.rds"))
# Save gene plot
ggsave(filename = file.path(results_folder,"/Heatmap_correlation.pdf"),plot = pheatmap_result,device = "pdf",height = 10,width = 12,units = "cm",limitsize = FALSE)
# Visualize clustering
DimPlot(integrated,label = T,label.size = 3,group.by = "seurat_clusters") + NoLegend()+ force_panelsizes(rows = unit(5,"cm"),cols = unit(5,"cm")) + theme_void() + NoLegend() + labs(title = "")
integrated <- FindClusters(integrated, resolution = 1)
# Visualize clustering
DimPlot(integrated,label = T,label.size = 3,group.by = "seurat_clusters") + NoLegend()+ force_panelsizes(rows = unit(5,"cm"),cols = unit(5,"cm")) + theme_void() + NoLegend() + labs(title = "")
table(integrated@meta.data$final_label,integrated@meta.data$seurat_clusters)
integrated <- FindClusters(integrated, resolution = 0.25)
table(integrated@meta.data$final_label,integrated@meta.data$seurat_clusters)
# Visualize clustering
DimPlot(integrated,label = T,label.size = 3,group.by = "seurat_clusters") + NoLegend()+ force_panelsizes(rows = unit(5,"cm"),cols = unit(5,"cm")) + theme_void() + NoLegend() + labs(title = "")
# Save umap plot data
integrated_metadata <- cbind(integrated@meta.data,integrated@reductions[["umap"]]@cell.embeddings)
# Check distribution of cells per final label and seurat clusters
table(integrated_metadata$final_label,integrated_metadata$seurat_clusters)
# Add new column with consensus_label
integrated_metadata$consensus_label <- integrated_metadata$seurat_clusters
integrated_metadata$consensus_label <- as.character(integrated_metadata$consensus_label)
# Add consensus labels
integrated_metadata$consensus_label[integrated_metadata$consensus_label %in% c("0","1","3","6")] <- "alpha"
integrated_metadata$consensus_label[integrated_metadata$consensus_label %in% c("2","7","10","8","9")] <- "beta"# Agt+
integrated_metadata$consensus_label[integrated_metadata$consensus_label %in% c("4")] <- "gamma"# Gfap+
integrated_metadata$consensus_label[integrated_metadata$consensus_label %in% c("5")] <- "delta"# AST4-like
integrated_metadata$consensus_label[integrated_metadata$consensus_label %in% c("10")] <- "epsilon"# ??+
table(integrated_metadata$consensus_label)
library(data.table)
library(dplyr)
library(Seurat)
library(ggplot2)
library(ggh4x)
library(matrixTests)
library(scico)
library(tidyr)
library(cowplot)
library(harmony)
library(magrittr)
# Load function files
source("../Scripts/Functions/20220708_generateWilcoxValues.R")
so <- readRDS("../04_Analysis/10_CB/Kozareva/so_astrocytes_basicQC.rds.download/")
so <- readRDS("../04_Analysis/10_CB/Kozareva/so_astrocytes_basicQC.rds")
options(future.globals.maxSize= 891289600)
# Define folder paths
scripts_folder <- "/Users/u0117021/Library/CloudStorage/OneDrive-KULeuven/LabFiles/Projects/0002_AstroMAP/AstroMAP/02_Scripts/Functions"
spatial_folder <- "/Users/u0117021/Library/CloudStorage/OneDrive-KULeuven/LabFiles/Projects/0002_AstroMAP/AstroMAP/04_Analysis/01_Spatial"
results_folder <- "/Users/u0117021/Library/CloudStorage/OneDrive-KULeuven/LabFiles/Projects/0002_AstroMAP/AstroMAP/04_Analysis/03_HPF"
reference_folder <- "/Users/u0117021/Library/CloudStorage/OneDrive-KULeuven/LabFiles/Projects/0002_AstroMAP/AstroMAP/03_Data"
plot_functions_folder <- "/Users/u0117021/Library/CloudStorage/OneDrive-KULeuven/LabFiles/Projects/0007_visualisR_package/visualisR/R"
dir.create(path = paste0(results_folder),showWarnings = F)
# Load plotting files
source(file.path(scripts_folder,"initialFiltering_one_step.R"))
source(file.path(scripts_folder,"standardClustering.R"))
source(file.path(scripts_folder,"percentageContribution.R"))
source(file.path(scripts_folder,"generateWilcoxValues_v2.R"))
source(file.path(scripts_folder,"addAvgExp_v2.R"))
source(file.path(scripts_folder,"softmax.R"))
source(file.path(scripts_folder,"harmonyIntegration.R"))
source(file.path(scripts_folder,"update_markers.R"))
source(file.path(scripts_folder,"order_genes.R"))
source(file.path(scripts_folder,"order_genes.R"))
source(file.path(scripts_folder,"createHeatmapData_v3.R"))
source(file.path(scripts_folder,"calculate_percentage_expressing.R"))
source(file.path(scripts_folder,"basic_qc_plots.R"))
source(file.path(scripts_folder,"sankey_qc_plot.R"))
source(file.path(scripts_folder,"make_umap_plot.R"))
source(file.path(scripts_folder,"drawBarPlot_v1.R"))
source(file.path(scripts_folder,"drawClusterHeatmap_v3.R"))
source(file.path(scripts_folder,"drawDimPlot.R"))
source(file.path(scripts_folder,"drawVisiumPlot.R"))
source(file.path(scripts_folder,"drawVlnPlot.R"))
knitr::opts_chunk$set(echo = TRUE)
'%!in%' <- function(x,y)!('%in%'(x,y))
set.seed(123)
so <- readRDS("../04_Analysis/10_CB/Kozareva/so_astrocytes_basicQC.rds")
so <- readRDS("../04_Analysis/10_CB/Kozareva/so_astrocytes_basicQC.rds")
so <- readRDS("../04_Analysis/10_CB/Kozareva/so_astrocytes_basicQC.rds")
results_folder <- "/Users/u0117021/Library/CloudStorage/OneDrive-KULeuven/LabFiles/Projects/0002_AstroMAP/AstroMAP/04_Analysis/10_CB"
so <- readRDS(file.path(results_folder,"/Kozareva/so_astrocytes_basicQC.rds"))
standardClustering_SCT <- function(dataset, pca = 15,resolution = 0.7, features = NULL,nfeatures = 6000,verbose = FALSE,vstflavor = "v2"){
# Cluster
dataset <- SCTransform(dataset,verbose = verbose,conserve.memory = FALSE,vst.flavor = vstflavor)
print("Running PCA.")
dataset <- RunPCA(dataset,verbose = F,features = features)
print("Finding neighbors.")
dataset <- FindNeighbors(object = dataset,dims = 1:pca,verbose = F)
print("Running UMAP")
dataset <- RunUMAP(object = dataset, dims = 1:pca,verbose = F,min.dist = 0.1)
print("Finding clusters")
dataset <- FindClusters(object = dataset, resolution = resolution, verbose = F)
dataset
}
so <- standardClustering_SCT(so)
options(future.globals.maxSize= 891289600)
# Define folder paths
scripts_folder <- "/Users/u0117021/Library/CloudStorage/OneDrive-KULeuven/LabFiles/Projects/0002_AstroMAP/AstroMAP/02_Scripts/Functions"
spatial_folder <- "/Users/u0117021/Library/CloudStorage/OneDrive-KULeuven/LabFiles/Projects/0002_AstroMAP/AstroMAP/04_Analysis/01_Spatial"
results_folder <- "/Users/u0117021/Library/CloudStorage/OneDrive-KULeuven/LabFiles/Projects/0002_AstroMAP/AstroMAP/04_Analysis/10_CB"
reference_folder <- "/Users/u0117021/Library/CloudStorage/OneDrive-KULeuven/LabFiles/Projects/0002_AstroMAP/AstroMAP/03_Data"
plot_functions_folder <- "/Users/u0117021/Library/CloudStorage/OneDrive-KULeuven/LabFiles/Projects/0007_visualisR_package/visualisR/R"
dir.create(path = paste0(results_folder),showWarnings = F)
# Load plotting files
source(file.path(scripts_folder,"initialFiltering_one_step.R"))
source(file.path(scripts_folder,"standardClustering.R"))
source(file.path(scripts_folder,"percentageContribution.R"))
source(file.path(scripts_folder,"generateWilcoxValues_v2.R"))
source(file.path(scripts_folder,"addAvgExp_v2.R"))
source(file.path(scripts_folder,"softmax.R"))
source(file.path(scripts_folder,"harmonyIntegration.R"))
source(file.path(scripts_folder,"update_markers.R"))
source(file.path(scripts_folder,"order_genes.R"))
source(file.path(scripts_folder,"order_genes.R"))
source(file.path(scripts_folder,"createHeatmapData_v3.R"))
source(file.path(scripts_folder,"calculate_percentage_expressing.R"))
source(file.path(scripts_folder,"basic_qc_plots.R"))
source(file.path(scripts_folder,"sankey_qc_plot.R"))
source(file.path(scripts_folder,"make_umap_plot.R"))
source(file.path(scripts_folder,"drawBarPlot_v1.R"))
source(file.path(scripts_folder,"drawClusterHeatmap_v3.R"))
source(file.path(scripts_folder,"drawDimPlot.R"))
source(file.path(scripts_folder,"drawVisiumPlot.R"))
source(file.path(scripts_folder,"drawVlnPlot.R"))
knitr::opts_chunk$set(echo = TRUE)
'%!in%' <- function(x,y)!('%in%'(x,y))
set.seed(123)
so <- readRDS(file.path(results_folder,"/Kozareva/so_astrocytes_basicQC.rds"))
standardClustering_SCT <- function(dataset, pca = 15,resolution = 0.7, features = NULL,nfeatures = 6000,verbose = FALSE,vstflavor = "v2"){
# Cluster
dataset <- SCTransform(dataset,verbose = verbose,conserve.memory = FALSE,vst.flavor = vstflavor)
print("Running PCA.")
dataset <- RunPCA(dataset,verbose = F,features = features)
print("Finding neighbors.")
dataset <- FindNeighbors(object = dataset,dims = 1:pca,verbose = F)
print("Running UMAP")
dataset <- RunUMAP(object = dataset, dims = 1:pca,verbose = F,min.dist = 0.1)
print("Finding clusters")
dataset <- FindClusters(object = dataset, resolution = resolution, verbose = F)
dataset
}
so <- standardClustering_SCT(so)
options(future.globals.maxSize = 2 * 1024^3)
# Define folder paths
scripts_folder <- "/Users/u0117021/Library/CloudStorage/OneDrive-KULeuven/LabFiles/Projects/0002_AstroMAP/AstroMAP/02_Scripts/Functions"
spatial_folder <- "/Users/u0117021/Library/CloudStorage/OneDrive-KULeuven/LabFiles/Projects/0002_AstroMAP/AstroMAP/04_Analysis/01_Spatial"
results_folder <- "/Users/u0117021/Library/CloudStorage/OneDrive-KULeuven/LabFiles/Projects/0002_AstroMAP/AstroMAP/04_Analysis/10_CB"
reference_folder <- "/Users/u0117021/Library/CloudStorage/OneDrive-KULeuven/LabFiles/Projects/0002_AstroMAP/AstroMAP/03_Data"
plot_functions_folder <- "/Users/u0117021/Library/CloudStorage/OneDrive-KULeuven/LabFiles/Projects/0007_visualisR_package/visualisR/R"
dir.create(path = paste0(results_folder),showWarnings = F)
# Load plotting files
source(file.path(scripts_folder,"initialFiltering_one_step.R"))
source(file.path(scripts_folder,"standardClustering.R"))
source(file.path(scripts_folder,"percentageContribution.R"))
source(file.path(scripts_folder,"generateWilcoxValues_v2.R"))
source(file.path(scripts_folder,"addAvgExp_v2.R"))
source(file.path(scripts_folder,"softmax.R"))
source(file.path(scripts_folder,"harmonyIntegration.R"))
source(file.path(scripts_folder,"update_markers.R"))
source(file.path(scripts_folder,"order_genes.R"))
source(file.path(scripts_folder,"order_genes.R"))
source(file.path(scripts_folder,"createHeatmapData_v3.R"))
source(file.path(scripts_folder,"calculate_percentage_expressing.R"))
source(file.path(scripts_folder,"basic_qc_plots.R"))
source(file.path(scripts_folder,"sankey_qc_plot.R"))
source(file.path(scripts_folder,"make_umap_plot.R"))
source(file.path(scripts_folder,"drawBarPlot_v1.R"))
source(file.path(scripts_folder,"drawClusterHeatmap_v3.R"))
source(file.path(scripts_folder,"drawDimPlot.R"))
source(file.path(scripts_folder,"drawVisiumPlot.R"))
source(file.path(scripts_folder,"drawVlnPlot.R"))
knitr::opts_chunk$set(echo = TRUE)
'%!in%' <- function(x,y)!('%in%'(x,y))
set.seed(123)
so <- standardClustering_SCT(so)
DimPlot(so)
DimPlot(so,group.by = "final_label")
install.packages("shinylive")
install.packages("httpuv")
library(shinylive)
library(httpuv)
# Load necessary libraries
library(data.table)
library(dplyr)
library(Seurat)
library(ggplot2)
library(ggh4x)
#library(matrixTests)
library(tidyr)
library(msigdbr)
# Load necessary libraries
library(data.table)
library(dplyr)
library(Seurat)
library(ggplot2)
library(ggh4x)
#library(matrixTests)
library(tidyr)
library(msigdbr)
library(data.table)
library(dplyr)
library(Seurat)
library(ggplot2)
library(ggh4x)
library(matrixTests)
shiny::runApp('Library/CloudStorage/OneDrive-KULeuven/LabFiles/Projects/0002_AstroMAP/AstroMAP/08_Webtool/test2/myapp')
setwd("~/OneDrive - KU Leuven/LabFiles/Projects/0002_AstroMAP/AstroMAP/08_Webtool/test2")
runApp('myapp')
runApp('myapp')
runApp('myapp')
runApp('myapp')
getwd()
ensembl_data <- read.csv("/Users/u0117021/Library/CloudStorage/OneDrive-KULeuven/LabFiles/Projects/0002_AstroMAP/AstroMAP/08_Webtool/test2/docs/ensembl98.csv")
file.access("docs/ensembl98.csv", 4)
server <- function(input, output, session) {
print(getwd())  # Check the working dir at runtime
output$rnaTable <- renderDT({
datatable(ensembl_data, options = list(pageLength = 10))
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
ui <- navbarPage(
"AstroMap",
tabPanel("Overview", "Here you can explore the intega"),
tabPanel("RNA-seq",
DTOutput("rnaTable")   # Display the data table here
),
tabPanel("Spatial", "spatial"),
navbarMenu("Regional",
tabPanel("Isocortex", "four-a"),
tabPanel("HPF", "four-b"),
tabPanel("OLF", "four-c")
)
)
# Create Shiny app ----
shinyApp(ui = ui, server = server)
runApp('myapp')
server <- function(input, output, session) {
# Render the RNA-seq data table
output$rnaTable <- renderDT({
datatable(ensembl_data, options = list(pageLength = 10))
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(here)
runApp('myapp')
hinylive::export(appdir = "myapp", destdir = "docs")
shinylive::export(appdir = "myapp", destdir = "docs")
httpuv::runStaticServer("docs")
runApp('myapp')
shinylive::export(appdir = "myapp", destdir = "docs")
httpuv::runStaticServer("docs")
runApp('myapp')
runApp('myapp')
shinylive::export(appdir = "myapp", destdir = "docs")
httpuv::runStaticServer("docs")
shinylive::export(appdir = "myapp", destdir = "docs")
httpuv::runStaticServer("docs")
shinylive::export(appdir = "myapp", destdir = "docs")
httpuv::runStaticServer("docs")
mtcars
shinylive::export(appdir = "myapp", destdir = "docs")
httpuv::runStaticServer("docs")
shinylive::export(appdir = "myapp", destdir = "docs")
httpuv::runStaticServer("docs")
runApp('myapp')
shinylive::export(appdir = "myapp", destdir = "docs")
httpuv::runStaticServer("docs")
library(shinylive)
shinylive::export(appdir = "myapp", destdir = "docs")
httpuv::runStaticServer("docs")
httpuv::runStaticServer("docs")
library(shinylive)
shinylive::export(appdir = "myapp", destdir = "docs")
httpuv::runStaticServer("docs")
setwd("~/OneDrive - KU Leuven/LabFiles/Projects/0002_AstroMAP/AstroMAP/08_Webtool/test2")
setwd("~/OneDrive - KU Leuven/LabFiles/Projects/0002_AstroMAP/AstroMAP/08_Webtool/test2")
shinylive::export(appdir = "myapp", destdir = "docs")
httpuv::runStaticServer("docs")
httpuv::runStaticServer("docs")
runApp('myapp')
shinylive::export(appdir = "myapp", destdir = "docs")
httpuv::runStaticServer("docs")
httpuv::runStaticServer("docs")
shinylive::export(appdir = "myapp", destdir = "docs")
httpuv::runStaticServer("docs")
runApp('myapp')
